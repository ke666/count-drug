# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'link.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import shutil
from PyQt5 import QtCore, QtGui, QtWidgets
from sys import path
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMessageBox, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget

import cv2
import numpy as np
import time
from skimage.measure import label, regionprops
from skimage.morphology import watershed
#from skimage.segmentation import watershed
from scipy import ndimage
import multiprocessing
import threading
import os

from PyQt5.QtCore import QDir, Qt, QUrl
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtWidgets import (QApplication, QFileDialog, QHBoxLayout, QLabel,
        QPushButton, QSizePolicy, QSlider, QStyle, QVBoxLayout, QWidget)


class VideoPlayer(QWidget):

    def __init__(self, parent=None):
        super(VideoPlayer, self).__init__(parent)

        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)

        videoWidget = QVideoWidget()

        #openButton = QPushButton("Open...")
        #openButton.clicked.connect(self.openFile)

        self.playButton = QPushButton()
        self.playButton.setEnabled(False)
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.playButton.clicked.connect(self.play)

        self.positionSlider = QSlider(Qt.Horizontal)
        self.positionSlider.setRange(0, 0)
        self.positionSlider.sliderMoved.connect(self.setPosition)

        self.errorLabel = QLabel()
        self.errorLabel.setSizePolicy(QSizePolicy.Preferred,
                QSizePolicy.Maximum)

        controlLayout = QHBoxLayout()
        controlLayout.setContentsMargins(0, 0, 0, 0)
        #controlLayout.addWidget(openButton)
        controlLayout.addWidget(self.playButton)
        controlLayout.addWidget(self.positionSlider)

        layout = QVBoxLayout()
        layout.addWidget(videoWidget)
        layout.addLayout(controlLayout)
        layout.addWidget(self.errorLabel)

        self.setLayout(layout)

        self.mediaPlayer.setVideoOutput(videoWidget)
        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        self.mediaPlayer.positionChanged.connect(self.positionChanged)
        self.mediaPlayer.durationChanged.connect(self.durationChanged)
        self.mediaPlayer.error.connect(self.handleError)

    def openFile(self):
        fileName, _ = QFileDialog.getOpenFileName(self, "Open Movie",
                QDir.homePath())

        if fileName != '':
            self.mediaPlayer.setMedia(
                    QMediaContent(QUrl.fromLocalFile(fileName)))
            self.playButton.setEnabled(True)

    def play(self):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.mediaPlayer.pause()
        else:
            self.mediaPlayer.play()

    def mediaStateChanged(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.playButton.setIcon(
                    self.style().standardIcon(QStyle.SP_MediaPause))
        else:
            self.playButton.setIcon(
                    self.style().standardIcon(QStyle.SP_MediaPlay))

    def positionChanged(self, position):
        self.positionSlider.setValue(position)

    def durationChanged(self, duration):
        self.positionSlider.setRange(0, duration)

    def setPosition(self, position):
        self.mediaPlayer.setPosition(position)

    def handleError(self):
        self.playButton.setEnabled(False)
        self.errorLabel.setText("Error: " + self.mediaPlayer.errorString())
#====================

class Ui_COUNTPILL(object):
    def setupUi(self, COUNTPILL):
        COUNTPILL.setObjectName("COUNTPILL")
        COUNTPILL.resize(590, 570)
        self.centralwidget = QtWidgets.QWidget(COUNTPILL)
        self.centralwidget.setObjectName("centralwidget")
        self.input_link = QtWidgets.QLineEdit(self.centralwidget)
        self.input_link.setGeometry(QtCore.QRect(130, 510, 350, 31))
        self.input_link.setObjectName("input_link")
        self.text_enterlink = QtWidgets.QLineEdit(self.centralwidget)
        self.text_enterlink.setGeometry(QtCore.QRect(20, 510, 96, 31))
        self.text_enterlink.setObjectName("text_enterlink")
        self.open = QtWidgets.QPushButton(self.centralwidget)
        self.open.setGeometry(QtCore.QRect(490, 510, 81, 31))
        self.open.setObjectName("open")

        self.video = VideoPlayer(self.centralwidget)

        self.video.setGeometry(QtCore.QRect(20, 10, 331, 491))
        #self.video.setText("")
        #self.video.setPixmap(QtGui.QPixmap("logo.png"))
        #self.video.setScaledContents(True)
        self.video.setObjectName("video")
        self.run = QtWidgets.QPushButton(self.centralwidget)
        self.run.setGeometry(QtCore.QRect(360, 170, 211, 81))
        self.run.setObjectName("run")
        self.run.setEnabled(False)
        # self.reset = QtWidgets.QPushButton(self.centralwidget)
        # self.reset.setGeometry(QtCore.QRect(360, 350, 211, 81))
        # self.reset.setObjectName("reset")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(360, 10, 211, 151))
        self.textBrowser.setObjectName("textBrowser")
        self.text_pill = QtWidgets.QLabel(self.centralwidget)
        self.text_pill.setGeometry(QtCore.QRect(360, 450, 111, 41))
        self.text_pill.setObjectName("text_pill")
        self.text_pillnumer = QtWidgets.QLabel(self.centralwidget)
        self.text_pillnumer.setStyleSheet("color: red; font-weight: bold;")
        self.text_pillnumer.setGeometry(QtCore.QRect(470, 450, 101, 41))
        self.text_pillnumer.setObjectName("text_pillnumer")
        self.text_pillnumer.setEnabled(False)
        # self.save = QtWidgets.QPushButton(self.centralwidget)
        # self.save.setGeometry(QtCore.QRect(360, 260, 211, 81))
        # self.save.setObjectName("save")
        COUNTPILL.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(COUNTPILL)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        COUNTPILL.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(COUNTPILL)
        self.statusbar.setObjectName("statusbar")
        COUNTPILL.setStatusBar(self.statusbar)

        self.retranslateUi(COUNTPILL)
        QtCore.QMetaObject.connectSlotsByName(COUNTPILL)
        
        self.heavy_thread = None

    def retranslateUi(self, COUNTPILL):
        _translate = QtCore.QCoreApplication.translate
        COUNTPILL.setWindowTitle(_translate("COUNTPILL", "COUNTPILL"))
        self.text_enterlink.setText(_translate("COUNTPILL", "Video (.avi):"))
        self.open.setText(_translate("COUNTPILL", "Browse"))
        self.run.setText(_translate("COUNTPILL", "Run"))
        #self.reset.setText(_translate("COUNTPILL", "Reset"))
        self.textBrowser.setHtml(_translate("COUNTPILL", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">Đồ án tin học:</span><span style=\" font-size:10pt;\"> Đếm số viên thuốc của một loại thuốc trong video có sẵn</span></p>\n"
# "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">Giáo viên hướng dẫn</span><span style=\" font-size:10pt;\">: Đặng Thành Tín</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">Người thực hiện</span><span style=\" font-size:10pt;\">: Lý Trung Kiên </span></p></body></html>"))
        self.text_pill.setText("Number of pills:")
        # self.save.setText(_translate("COUNTPILL", "Save"))

        self.open.clicked.connect(self.openClicked)
        self.run.clicked.connect(self.runClicked)
        # self.reset.clicked.connect(self.resetClicked)
        # self.save.clicked.connect(self.saveClicked)
    
    def openClicked(self):
        self.run.setText("Run")
        self.run.setEnabled(True)
        self.video.playButton.setEnabled(False)
        filename = QFileDialog.getOpenFileName()
        self.path = filename[0]
        self.input_link.setText(self.path)
        return filename[0]

    def main(self, name):
        self.run.setEnabled(False)
        self.run.setText("Reading Video")
        inputvideo = cv2.VideoCapture(name)
        pool = multiprocessing.Pool()
        index = 0
        results = []
        decimation_factor = 20

        while True:
            t = time.time()
            ret, img = inputvideo.read()
            if ret == False:
                break
            if index % decimation_factor == 0:
                promise = pool.apply_async(process, [img])
                results.append((index, promise))
            index += 1
        
        base, ext = os.path.splitext(name)
        outputname = base + "_output" + ext
        inputvideo = cv2.VideoCapture(name)
        fps = int(inputvideo.get(cv2.cv2.CAP_PROP_FPS))
        width  = int(inputvideo.get(cv2.cv2.CAP_PROP_FRAME_WIDTH))
        height = int(inputvideo.get(cv2.cv2.CAP_PROP_FRAME_HEIGHT))
        outputvideo = cv2.VideoWriter(outputname, cv2.VideoWriter.fourcc('M','J','P','G'), fps, (width, height))
        
        num_pill = 0
        warn = False
        index = 0
        max_num_pill = 0
        l = len(results)
        j = 0

        while True:
            ret, img = inputvideo.read()
            if ret == False:
                break
            if index % decimation_factor == 0:
                _, promise = results.pop(0)
                num_pill, warn = promise.get()
                j += 1
                self.run.setText("{}%".format(int(j/l*100)))
                if j > l:
                    self.run.setText("Writing Video")
                max_num_pill = max(max_num_pill, int(num_pill))
            cv2.putText(img, 'Result: ' + str(int(num_pill)), (5, 30), 4, 1, (0, 255, 255), 1)
            if warn:
                cv2.putText(img, 'Warning', (10, 450), 4, 1, (0, 255, 255), 1)
            outputvideo.write(img)
            index += 1
        
        inputvideo.release()
        outputvideo.release()
        
        self.run.setText("Done")
        
        self.text_pillnumer.setText(str(max_num_pill))
        self.video.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(outputname)))
        self.video.playButton.setEnabled(True)
        self.video.mediaPlayer.play()

    def show_popup_error(self):
        msg = QMessageBox()
        msg.setWindowTitle("ERROR!")

        if self.run_error !=" ":
            msg.setText("Please enter a link!")
            r = msg.exec_()
            return r
        elif self.save_error != " ":
            msg.setText("File already existed")
            s = msg.exec_()
            return s

    def runClicked(self):
        self.run_error = " "
        if self.path == " ":
            self.run_error = "Please enter a link!"
            a = self.show_popup_error()
        else:
            if self.heavy_thread:
                self.heavy_thread.join()
            self.heavy_thread = threading.Thread(target=self.main, args=[self.path])
            self.heavy_thread.start()
            
    # def resetClicked(self):
    #     self.path = " "
    #     self.input_link.setText(" ")
    #     self.video.setPixmap(QtGui.QPixmap("logo.png"))
    #     self.text_pillnumer.setText(" ")
    #     if os.path.isfile(self.direct):
    #         os.remove(self.direct)
    #     else:
    #         self.reset_error = "File not exist"
        
    # def saveClicked(self):
    #     self.save_error = " "
    #     self.direct_save = self.direct.replace("videos", "Saves")
    #     if os.path.isfile(self.direct_save):
    #         self.save_error = "File already existed"
    #         c = self.show_popup_error()
    #     else:
    #         os.replace(self.direct, self.direct_save)

    
def process(img):
    # Pre-processing
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    ret, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    # noise removal
    kernel = np.ones((3, 3), np.uint8)
    BW = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=2)
    BW2 = seg_watershed(BW, gray)
    return caculate_pill(BW2)

def seg_watershed(BW, gray):
    # Watershed Transform
    D = ndimage.distance_transform_edt(BW)
    ret, mask = cv2.threshold(D, 0.4 * D.max(), 255, 0)
    mask = np.uint8(mask)

    # Marker labeling Watershed Line ==> line
    ret, markers = cv2.connectedComponents(mask)
    labels = watershed(-D, markers, mask=gray, watershed_line=True)
    line = np.zeros(BW.shape, dtype=np.uint8)
    line[labels == 0] = 255
    line = cv2.dilate(line, np.ones((2, 2), np.uint8), iterations=1)

    # Creating BW2
    BW2 = BW.copy()
    BW2[line == 255] = 0
    return BW2


def caculate_pill(BW2):
    label_image = label(BW2)
    A = [r.area for r in regionprops(label_image)]
    A.sort()

    num = 0
    S = 0
    num_pill = 0
    warn = False
    # Find minArea
    for i in range(len(A)):
        rateArea = A[i] / A[0]
        if rateArea < 1.15:
            num = num + 1
            S = S + A[i]
    if num != 0:
        minArea = S / num

    # Calculate num_pill
    for i in range(len(A)):
        rate = A[i] / minArea
        appro_rate = round(rate, 0)
        delta_rate = abs(rate - appro_rate)

        if delta_rate < 0.3:
            num_pill = num_pill + appro_rate
        else:
            warn = True

    if num_pill == 0:
        warn = True
    return num_pill, warn



if __name__ == "__main__":
    # multiprocessing.freeze_support()
    app = QtWidgets.QApplication(sys.argv)
    COUNTPILL = QtWidgets.QMainWindow()
    ui = Ui_COUNTPILL()
    ui.setupUi(COUNTPILL)
    COUNTPILL.show()
    code = app.exec_()
    if ui.heavy_thread:
        ui.heavy_thread.join()
    sys.exit(code)
